buildscript {
  dependencies {
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:6.1.0"
  }
}

plugins {
  id "biz.aQute.bnd" version "6.1.0" apply false
}

apply from: gradle.oshCoreDir + '/common.gradle'
description = ''

allprojects {
  version = '0.0.0'
}

repositories {
  mavenCentral()
}

subprojects {
  // inject all repositories from included builds if any
  repositories.addAll(rootProject.repositories)
}

dependencies {
  implementation 'org.sensorhub:sensorhub-core:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-core-osgi:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-datastore-h2:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-service-swe:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-webui-core:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-service-consys:' + oshCoreVersion
  implementation project(':sensorhub-driver-template')
  implementation project(':sensorhub-comm-mavlink2')

//  implementation project(':[storage-module-name]')
//  implementation project(':[service-name]')
//  implementation project(':[driver-name]')
//
// Ex:
//
//  implementation project(':sensorhub-storage-compat')
//  implementation project(':sensorhub-storage-h2')
//  implementation project(':sensorhub-service-video')
//  implementation project(':sensorhub-driver-videocam')
}

// create one configuration for each distribution
configurations {
  main
}

distributions {
  main {
    distributionBaseName = 'osh-node'
    contents {
      from 'dist/scripts/'
      into ('config') {
        from 'dist/config'
      }
      into ('processes') {
        from 'dist/processes'
      }
      into ('natives') {
        from 'dist/natives'
      }
      from 'README.md'
      into('web') {
        from 'web'
      }
      into('lib') {
        from project.configurations.runtimeClasspath
        from 'other-modules/jars'
      }
      subprojects.each { p ->
        into('config/sensorML') {
          from("${p.projectDir}/sensorML")
        }
      }
    }
  }
}

tasks.register("harvestBundles", Copy) {
  destinationDir = layout.buildDirectory.dir("bundles").get().asFile
//  from project(':sensorhub-driver-template').osgi.outputs
  subprojects.forEach {pr -> { from pr.osgi.outputs }}
}

tasks.register("genOSGiIndex", aQute.bnd.gradle.Index) {
  destinationDirectory = file(layout.buildDirectory.dir("bundles"))
  gzip = false
  bundles = fileTree(destinationDirectory) {
    include "**/*-bundle.jar"
    builtBy tasks.withType(Jar)
  }
}

tasks.register("bundlesDistZip", Zip) {
  destinationDirectory = file(layout.buildDirectory.dir("distributions"))
  from layout.buildDirectory.dir("bundles").get().asFile
  include '*'
  include '*/*' //to include contents of a folder present inside bundles directory
  archiveBaseName = 'osgi-bundles-' + project.version + '.zip'
}

genOSGiIndex.dependsOn(harvestBundles)
bundlesDistZip.dependsOn(genOSGiIndex)

apply from: gradle.oshCoreDir + '/release.gradle'
